/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.elf.jshowart;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import javax.swing.*;

/**
 *
 * @author bnevins
 */
public class Controller extends JFrame {

    private final UserPreferences prefs;
    private View view;
    private static GraphicsDevice graphicsDevice = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0];
    private boolean currentFullScreen = false;
    private KeyHandler keyHandler;
    private SlideShow slideshow = null;

    // keep it alive because it can be S-L-O-W to start
    /**
     * Creates new form JShowartFrame
     */
    public Controller() {
        prefs = UserPreferences.get();
        initComponents();
        clearAllSortButtons();
        clearAllScaleButtons();
        MenuSlideshow.setSelected(false);
        initSlider();
        
        switch (prefs.getSortType()) {
            case "Name" ->
                MenuSortName.setSelected(true);
            case "Date" ->
                MenuSortDate.setSelected(true);
            case "Size" ->
                MenuSortSize.setSelected(true);
            case "Random" ->
                MenuSortRandom.setSelected(true);
            default -> { // can't happen
                MenuSortName.setSelected(true);
                prefs.setSortType("Name");
            }
        }
        if (prefs.isSortAscending())
            MenuSortAscending.setSelected(true);
        else
            MenuSortDescending.setSelected(true);

        sortTypeGroup.add(MenuSortName);
        sortTypeGroup.add(MenuSortDate);
        sortTypeGroup.add(MenuSortSize);
        sortTypeGroup.add(MenuSortRandom);
        sortDirectionGroup.add(MenuSortAscending);
        sortDirectionGroup.add(MenuSortDescending);
        shrinkGroup.add(MenuNoScale);
        shrinkGroup.add(MenuShrinkHalf);
        shrinkGroup.add(MenuShrinkFourth);
        shrinkGroup.add(MenuShrinkEighth);
        shrinkGroup.add(MenuExpand125);
        shrinkGroup.add(MenuExpand150);
        shrinkGroup.add(MenuExpand200);
        MenuFitToWindow.setSelected(prefs.fitToWindow);

        setBounds(prefs.windowBounds);

        if (prefs.isMaximized())
            setExtendedState(MAXIMIZED_BOTH);

        MenuDebugMode.setSelected(prefs.isDebug());

        // note: they get keystrokes in the order that they're added!  View first, then Controller, then KeyHandler
        addKeyListener(keyHandler = new KeyHandler());
        Globals.controller = this;

    }

    public void enableNavigationKeys() {
        // When Model loads files it needs to call this.  Otherwise the nav keys won't work until the Nav menu is selected!
        MenuNavigateMenuSelected(null);
    }

    public void enableSaveImages(boolean enable) {
        MenuSave.setEnabled(enable);
        MenuSaveAs.setEnabled(enable);
    }

    public void toggleFullScreen() {
        System.out.println("TOGGLE FULL SCREEN = " + currentFullScreen);
        currentFullScreen = !currentFullScreen;

        if (currentFullScreen) {
            // TODO remove menubar
            setVisible(false);
            dispose();
            setUndecorated(true);
            setResizable(false);
            //setExtendedState(JFrame.MAXIMIZED_BOTH); 
            graphicsDevice.setFullScreenWindow(this);
            setAlwaysOnTop(true);
            setVisible(true);
        } else {
            graphicsDevice.setFullScreenWindow(null);
            dispose();
            setUndecorated(false);
            setResizable(true);
            setExtendedState(JFrame.NORMAL);
            setBounds(prefs.windowBounds);
            setAlwaysOnTop(false);
            setVisible(true);
        }
    }

    /**
     * *
     * addWindowListener WindowAdapter
     *
     * @Override protected void processWindowEvent(WindowEvent e) { if (e.getID() == WindowEvent.WINDOW_DEACTIVATED) { // windowState is set in my set full
     * screen code if (windowState == WindowState.FULL_SCREEN) { return; } } * super.processWindowEvent(e); }
     */
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortTypeGroup = new javax.swing.ButtonGroup();
        sortDirectionGroup = new javax.swing.ButtonGroup();
        shrinkGroup = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        MenuBar = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        MenuOpenFiles = new javax.swing.JMenuItem();
        MenuSave = new javax.swing.JMenuItem();
        MenuSaveAs = new javax.swing.JMenuItem();
        MenuSaveCurrentSizeAs = new javax.swing.JMenuItem();
        MenuEdit = new javax.swing.JMenu();
        MenuView = new javax.swing.JMenu();
        MenuFitToWindow = new javax.swing.JCheckBoxMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        MenuRotate90 = new javax.swing.JMenuItem();
        MenuRotate180 = new javax.swing.JMenuItem();
        MenuRotate270 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuScale = new javax.swing.JMenu();
        MenuNoScale = new javax.swing.JRadioButtonMenuItem();
        MenuShrinkHalf = new javax.swing.JRadioButtonMenuItem();
        MenuShrinkFourth = new javax.swing.JRadioButtonMenuItem();
        MenuShrinkEighth = new javax.swing.JRadioButtonMenuItem();
        MenuExpand125 = new javax.swing.JRadioButtonMenuItem();
        MenuExpand150 = new javax.swing.JRadioButtonMenuItem();
        MenuExpand200 = new javax.swing.JRadioButtonMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuSort = new javax.swing.JMenu();
        MenuSortName = new javax.swing.JRadioButtonMenuItem();
        MenuSortSize = new javax.swing.JRadioButtonMenuItem();
        MenuSortDate = new javax.swing.JRadioButtonMenuItem();
        MenuSortRandom = new javax.swing.JRadioButtonMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        MenuSortAscending = new javax.swing.JRadioButtonMenuItem();
        MenuSortDescending = new javax.swing.JRadioButtonMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        MenuNavigate = new javax.swing.JMenu();
        MenuNavigateNext = new javax.swing.JMenuItem();
        MenuNavigateBack = new javax.swing.JMenuItem();
        MenuNavigateForward5 = new javax.swing.JMenuItem();
        MenuNavigateBack5 = new javax.swing.JMenuItem();
        MenuNavigateForward25 = new javax.swing.JMenuItem();
        MenuNavigateBack25 = new javax.swing.JMenuItem();
        MenuUtilities = new javax.swing.JMenu();
        MenuDebugMode = new javax.swing.JCheckBoxMenuItem();
        MenuSlideshow = new javax.swing.JCheckBoxMenuItem();
        MenuKeyCommands = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();
        MenuScaler = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JShowArt");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onWindowClosing(evt);
            }
        });

        MenuFile.setText("File");
        MenuFile.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MenuFileMenuSelected(evt);
            }
        });

        MenuOpenFiles.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuOpenFiles.setText("Open Files and Folders");
        MenuOpenFiles.setToolTipText("Open Image(s)");
        MenuOpenFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuOpenFilesActionPerformed(evt);
            }
        });
        MenuFile.add(MenuOpenFiles);

        MenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuSave.setText("Save");
        MenuSave.setToolTipText("Save Image");
        MenuSave.setEnabled(false);
        MenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSaveActionPerformed(evt);
            }
        });
        MenuFile.add(MenuSave);

        MenuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuSaveAs.setText("Save As...");
        MenuSaveAs.setToolTipText("Save Image As...");
        MenuSaveAs.setEnabled(false);
        MenuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSaveAsActionPerformed(evt);
            }
        });
        MenuFile.add(MenuSaveAs);

        MenuSaveCurrentSizeAs.setText("Save Current Size As");
        MenuSaveCurrentSizeAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSaveCurrentSizeAsActionPerformed(evt);
            }
        });
        MenuFile.add(MenuSaveCurrentSizeAs);

        MenuBar.add(MenuFile);

        MenuEdit.setText("Edit");
        MenuBar.add(MenuEdit);

        MenuView.setText("View");
        MenuView.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MenuViewMenuSelected(evt);
            }
        });

        MenuFitToWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuFitToWindow.setSelected(true);
        MenuFitToWindow.setText("Fit To Window");
        MenuFitToWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuFitToWindowActionPerformed(evt);
            }
        });
        MenuView.add(MenuFitToWindow);
        MenuView.add(jSeparator7);

        MenuRotate90.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuRotate90.setText("Rotate 90 CW");
        MenuRotate90.setToolTipText("Rotate 90 CW and Save");
        MenuRotate90.setActionCommand("rotate90");
        MenuRotate90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate90(evt);
            }
        });
        MenuView.add(MenuRotate90);

        MenuRotate180.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuRotate180.setText("Rotate 180 CW");
        MenuRotate180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRotate180ActionPerformed(evt);
            }
        });
        MenuView.add(MenuRotate180);

        MenuRotate270.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuRotate270.setText("Rotate 270 CW");
        MenuRotate270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRotate270ActionPerformed(evt);
            }
        });
        MenuView.add(MenuRotate270);
        MenuView.add(jSeparator2);

        MenuScale.setText("Scale Image");

        MenuNoScale.setSelected(true);
        MenuNoScale.setText("No Scale");
        MenuNoScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNoScaleActionPerformed(evt);
            }
        });
        MenuScale.add(MenuNoScale);

        MenuShrinkHalf.setText("Shrink 1/2");
        MenuShrinkHalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuShrinkHalfActionPerformed(evt);
            }
        });
        MenuScale.add(MenuShrinkHalf);

        MenuShrinkFourth.setText("Shrink 1/4");
        MenuShrinkFourth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuShrinkFourthActionPerformed(evt);
            }
        });
        MenuScale.add(MenuShrinkFourth);

        MenuShrinkEighth.setText("Shrink 1/8");
        MenuShrinkEighth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuShrinkEighthActionPerformed(evt);
            }
        });
        MenuScale.add(MenuShrinkEighth);

        MenuExpand125.setSelected(true);
        MenuExpand125.setText("Expand 125%");
        MenuExpand125.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuExpand125ActionPerformed(evt);
            }
        });
        MenuScale.add(MenuExpand125);

        MenuExpand150.setSelected(true);
        MenuExpand150.setText("Expand 150%");
        MenuExpand150.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuExpand150ActionPerformed(evt);
            }
        });
        MenuScale.add(MenuExpand150);

        MenuExpand200.setSelected(true);
        MenuExpand200.setText("Expand 200%");
        MenuExpand200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuExpand200ActionPerformed(evt);
            }
        });
        MenuScale.add(MenuExpand200);

        MenuView.add(MenuScale);
        MenuView.add(jSeparator1);

        MenuSort.setText("Sort");
        MenuSort.setEnabled(false);
        MenuSort.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MenuSortMenuSelected(evt);
            }
        });

        MenuSortName.setText("Name");
        MenuSortName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSortNameActionPerformed(evt);
            }
        });
        MenuSort.add(MenuSortName);

        MenuSortSize.setText("Size");
        MenuSortSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSortSizeActionPerformed(evt);
            }
        });
        MenuSort.add(MenuSortSize);

        MenuSortDate.setText("Date");
        MenuSortDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSortDateActionPerformed(evt);
            }
        });
        MenuSort.add(MenuSortDate);

        MenuSortRandom.setText("Random");
        MenuSortRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSortRandomActionPerformed(evt);
            }
        });
        MenuSort.add(MenuSortRandom);
        MenuSort.add(jSeparator9);

        MenuSortAscending.setText("Ascending");
        MenuSortAscending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSortAscendingActionPerformed(evt);
            }
        });
        MenuSort.add(MenuSortAscending);

        MenuSortDescending.setText("Descending");
        MenuSortDescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSortDescendingActionPerformed(evt);
            }
        });
        MenuSort.add(MenuSortDescending);

        MenuView.add(MenuSort);
        MenuView.add(jSeparator8);

        MenuBar.add(MenuView);

        MenuNavigate.setText("Navigate");
        MenuNavigate.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MenuNavigateMenuSelected(evt);
            }
        });

        MenuNavigateNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, 0));
        MenuNavigateNext.setText("Next");
        MenuNavigateNext.setEnabled(false);
        MenuNavigateNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNavigateNextActionPerformed(evt);
            }
        });
        MenuNavigate.add(MenuNavigateNext);

        MenuNavigateBack.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, 0));
        MenuNavigateBack.setText("Back");
        MenuNavigateBack.setEnabled(false);
        MenuNavigateBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNavigateBackActionPerformed(evt);
            }
        });
        MenuNavigate.add(MenuNavigateBack);

        MenuNavigateForward5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuNavigateForward5.setText("Forward 5");
        MenuNavigateForward5.setEnabled(false);
        MenuNavigateForward5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNavigateForward5ActionPerformed(evt);
            }
        });
        MenuNavigate.add(MenuNavigateForward5);

        MenuNavigateBack5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuNavigateBack5.setText("Back 5");
        MenuNavigateBack5.setEnabled(false);
        MenuNavigateBack5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNavigateBack5ActionPerformed(evt);
            }
        });
        MenuNavigate.add(MenuNavigateBack5);

        MenuNavigateForward25.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuNavigateForward25.setText("Forward 25");
        MenuNavigateForward25.setEnabled(false);
        MenuNavigateForward25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNavigateForward25ActionPerformed(evt);
            }
        });
        MenuNavigate.add(MenuNavigateForward25);

        MenuNavigateBack25.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuNavigateBack25.setText("Back 25");
        MenuNavigateBack25.setEnabled(false);
        MenuNavigateBack25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNavigateBack25ActionPerformed(evt);
            }
        });
        MenuNavigate.add(MenuNavigateBack25);

        MenuBar.add(MenuNavigate);

        MenuUtilities.setText("Utilities");
        MenuUtilities.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MenuUtilitiesMenuSelected(evt);
            }
        });

        MenuDebugMode.setSelected(true);
        MenuDebugMode.setText("Debug Mode");
        MenuDebugMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuDebugModeActionPerformed(evt);
            }
        });
        MenuUtilities.add(MenuDebugMode);

        MenuSlideshow.setSelected(true);
        MenuSlideshow.setText("Slideshow");
        MenuSlideshow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSlideshowActionPerformed(evt);
            }
        });
        MenuUtilities.add(MenuSlideshow);

        MenuKeyCommands.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuKeyCommands.setText("Key Commands...");
        MenuKeyCommands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuKeyCommandsActionPerformed(evt);
            }
        });
        MenuUtilities.add(MenuKeyCommands);

        MenuBar.add(MenuUtilities);

        MenuHelp.setText("Help");

        about.setText("About JShowArt...");
        about.setToolTipText("");
        about.setActionCommand("");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        MenuHelp.add(about);

        MenuBar.add(MenuHelp);

        MenuScaler.setText("Scaler");
        MenuScaler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuScalerActionPerformed(evt);
            }
        });
        MenuBar.add(MenuScaler);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        AboutDialog about = new AboutDialog(this, true);
        about.setVisible(true);
    }//GEN-LAST:event_aboutActionPerformed

    private void MenuOpenFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuOpenFilesActionPerformed
        var chooser = Globals.setupAndGetOpenFileChooser();
        int returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] files = chooser.getSelectedFiles();
            int numFilesAdded = Model.get().replace(files);

            if (numFilesAdded <= 0)
                enableSaveImages(false);
            else {
                enableSaveImages(true);
                prefs.previousOpenFileParent = chooser.getCurrentDirectory();
            }
        }
    }//GEN-LAST:event_MenuOpenFilesActionPerformed

    private void MenuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSaveAsActionPerformed
        assert (view != null);
        view.saveAs();

    }//GEN-LAST:event_MenuSaveAsActionPerformed

    private void onWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowClosing
//        int state = getExtendedState();
//        
//        String stateString = switch(state) {
//            case NORMAL -> "Normal";
//            case MAXIMIZED_BOTH -> "Maximized";
//            case ICONIFIED -> "Iconified";
//            default -> "Unknown";
//        };
//        System.out.println("WINDOW CLOSING -- State is " + stateString);

        prefs.setMaximized(getExtendedState() == MAXIMIZED_BOTH);
        prefs.windowBounds = getBounds();
        prefs.write();
    }//GEN-LAST:event_onWindowClosing

    private void MenuFitToWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuFitToWindowActionPerformed
        System.out.println("FitToWindow: isSelected: " + MenuFitToWindow.isSelected() + "   " + evt);
        prefs.fitToWindow = MenuFitToWindow.isSelected();
        repaint();
    }//GEN-LAST:event_MenuFitToWindowActionPerformed

    private void MenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSaveActionPerformed
        // TODO add your handling code here:
        assert (view != null);
        view.save();
    }//GEN-LAST:event_MenuSaveActionPerformed

    private void rotate90(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90
        view.rotate(90);
    }//GEN-LAST:event_rotate90

    private void MenuRotate180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRotate180ActionPerformed
        view.rotate(180);
    }//GEN-LAST:event_MenuRotate180ActionPerformed

    private void MenuRotate270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRotate270ActionPerformed
        view.rotate(270);
    }//GEN-LAST:event_MenuRotate270ActionPerformed

    private void MenuSaveCurrentSizeAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSaveCurrentSizeAsActionPerformed
        view.saveCurrentSizeAs();
    }//GEN-LAST:event_MenuSaveCurrentSizeAsActionPerformed

    private void MenuFileMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MenuFileMenuSelected
        boolean hasImage = view.hasImageLoaded();
        MenuSave.setEnabled(hasImage);
        MenuSaveAs.setEnabled(hasImage);
        MenuSaveCurrentSizeAs.setEnabled(hasImage && prefs.fitToWindow && view.getScaleFactor() == 1.0);
    }//GEN-LAST:event_MenuFileMenuSelected

    private void MenuViewMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MenuViewMenuSelected
        boolean hasImage = view.hasImageLoaded();
        MenuFitToWindow.setEnabled(hasImage);
        MenuRotate90.setEnabled(hasImage);
        MenuRotate180.setEnabled(hasImage);
        MenuRotate270.setEnabled(hasImage);
        MenuScale.setEnabled(hasImage);
        MenuSort.setEnabled(hasImage);
        MenuSortAscending.setEnabled(hasImage);
        MenuSortDate.setEnabled(hasImage);
        MenuSortDescending.setEnabled(hasImage);
        MenuSortName.setEnabled(hasImage);
        MenuSortRandom.setEnabled(hasImage);
        MenuSortSize.setEnabled(hasImage);
    }//GEN-LAST:event_MenuViewMenuSelected

    private void MenuSortNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSortNameActionPerformed
        menuSortHelper(evt);
    }//GEN-LAST:event_MenuSortNameActionPerformed

    private void MenuSortSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSortSizeActionPerformed
        menuSortHelper(evt);
    }//GEN-LAST:event_MenuSortSizeActionPerformed

    private void MenuSortDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSortDateActionPerformed
        menuSortHelper(evt);
    }//GEN-LAST:event_MenuSortDateActionPerformed

    private void MenuSortRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSortRandomActionPerformed
        menuSortHelper(evt);
    }//GEN-LAST:event_MenuSortRandomActionPerformed

    private void MenuSortAscendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSortAscendingActionPerformed
        menuSortDirectionHelper(true);
    }//GEN-LAST:event_MenuSortAscendingActionPerformed

    private void MenuSortDescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSortDescendingActionPerformed
        menuSortDirectionHelper(false);
    }//GEN-LAST:event_MenuSortDescendingActionPerformed

    private void MenuDebugModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuDebugModeActionPerformed
        // TODO add your handling code here:
        prefs.setDebug(MenuDebugMode.isSelected());
    }//GEN-LAST:event_MenuDebugModeActionPerformed

    private void MenuSlideshowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSlideshowActionPerformed
        if (slideshow == null) {
            MenuSlideshow.setSelected(true);
            slideshow = new SlideShow();
        } else {
            MenuSlideshow.setSelected(false);
            slideshow.stop();
            slideshow = null;
        }
    }//GEN-LAST:event_MenuSlideshowActionPerformed

    private void MenuUtilitiesMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MenuUtilitiesMenuSelected
        MenuSlideshow.setEnabled(Model.get().numImages() > 1);
    }//GEN-LAST:event_MenuUtilitiesMenuSelected
    private void MenuShrinkHalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuShrinkHalfActionPerformed
        view.setScaleFactor(0.5);
    }//GEN-LAST:event_MenuShrinkHalfActionPerformed

    private void MenuShrinkFourthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuShrinkFourthActionPerformed
        view.setScaleFactor(0.25);
    }//GEN-LAST:event_MenuShrinkFourthActionPerformed

    private void MenuShrinkEighthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuShrinkEighthActionPerformed
        view.setScaleFactor(0.125);
    }//GEN-LAST:event_MenuShrinkEighthActionPerformed

    private void MenuNoScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNoScaleActionPerformed
        view.setScaleFactor(1.0);
    }//GEN-LAST:event_MenuNoScaleActionPerformed

    private void MenuNavigateMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MenuNavigateMenuSelected
        int numImages = Model.get().numImages();
        MenuNavigateNext.setEnabled(numImages > 1);
        MenuNavigateBack.setEnabled(numImages > 1);
        MenuNavigateBack5.setEnabled(numImages > 5);
        MenuNavigateForward5.setEnabled(numImages > 5);
        MenuNavigateBack25.setEnabled(numImages > 25);
        MenuNavigateForward25.setEnabled(numImages > 25);

    }//GEN-LAST:event_MenuNavigateMenuSelected

    private void MenuNavigateBack25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNavigateBack25ActionPerformed
        view.prevImage(25);
    }//GEN-LAST:event_MenuNavigateBack25ActionPerformed

    private void MenuNavigateNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNavigateNextActionPerformed
        view.nextImage();
    }//GEN-LAST:event_MenuNavigateNextActionPerformed

    private void MenuNavigateBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNavigateBackActionPerformed
        view.prevImage();
    }//GEN-LAST:event_MenuNavigateBackActionPerformed

    private void MenuNavigateForward5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNavigateForward5ActionPerformed
        view.nextImage(5);
    }//GEN-LAST:event_MenuNavigateForward5ActionPerformed

    private void MenuNavigateBack5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNavigateBack5ActionPerformed
        view.prevImage(5);
    }//GEN-LAST:event_MenuNavigateBack5ActionPerformed

    private void MenuNavigateForward25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNavigateForward25ActionPerformed
        view.nextImage(25);
    }//GEN-LAST:event_MenuNavigateForward25ActionPerformed

    private void MenuExpand125ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuExpand125ActionPerformed
        view.setScaleFactor(1.25);
    }//GEN-LAST:event_MenuExpand125ActionPerformed

    private void MenuExpand150ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuExpand150ActionPerformed
        view.setScaleFactor(1.5);
    }//GEN-LAST:event_MenuExpand150ActionPerformed

    private void MenuExpand200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuExpand200ActionPerformed
        view.setScaleFactor(2.0);
    }//GEN-LAST:event_MenuExpand200ActionPerformed

    private void MenuSortMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MenuSortMenuSelected
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuSortMenuSelected

    private void MenuKeyCommandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuKeyCommandsActionPerformed
        new KeyDialog(this, true);
    }//GEN-LAST:event_MenuKeyCommandsActionPerformed

    private void MenuScalerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuScalerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuScalerActionPerformed

    private void menuSortHelper(java.awt.event.ActionEvent evt) {
        String type = evt.getActionCommand();
        prefs.setSortType(type);
        Model.get().sort();
    }

    private void menuSortDirectionHelper(boolean ascending) {
        prefs.setSortAscending(ascending);
        Model.get().sort();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Controller().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JCheckBoxMenuItem MenuDebugMode;
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JRadioButtonMenuItem MenuExpand125;
    private javax.swing.JRadioButtonMenuItem MenuExpand150;
    private javax.swing.JRadioButtonMenuItem MenuExpand200;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JCheckBoxMenuItem MenuFitToWindow;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JMenuItem MenuKeyCommands;
    private javax.swing.JMenu MenuNavigate;
    private javax.swing.JMenuItem MenuNavigateBack;
    private javax.swing.JMenuItem MenuNavigateBack25;
    private javax.swing.JMenuItem MenuNavigateBack5;
    private javax.swing.JMenuItem MenuNavigateForward25;
    private javax.swing.JMenuItem MenuNavigateForward5;
    private javax.swing.JMenuItem MenuNavigateNext;
    private javax.swing.JRadioButtonMenuItem MenuNoScale;
    private javax.swing.JMenuItem MenuOpenFiles;
    private javax.swing.JMenuItem MenuRotate180;
    private javax.swing.JMenuItem MenuRotate270;
    private javax.swing.JMenuItem MenuRotate90;
    private javax.swing.JMenuItem MenuSave;
    private javax.swing.JMenuItem MenuSaveAs;
    private javax.swing.JMenuItem MenuSaveCurrentSizeAs;
    private javax.swing.JMenu MenuScale;
    private javax.swing.JMenu MenuScaler;
    private javax.swing.JRadioButtonMenuItem MenuShrinkEighth;
    private javax.swing.JRadioButtonMenuItem MenuShrinkFourth;
    private javax.swing.JRadioButtonMenuItem MenuShrinkHalf;
    private javax.swing.JCheckBoxMenuItem MenuSlideshow;
    private javax.swing.JMenu MenuSort;
    private javax.swing.JRadioButtonMenuItem MenuSortAscending;
    private javax.swing.JRadioButtonMenuItem MenuSortDate;
    private javax.swing.JRadioButtonMenuItem MenuSortDescending;
    private javax.swing.JRadioButtonMenuItem MenuSortName;
    private javax.swing.JRadioButtonMenuItem MenuSortRandom;
    private javax.swing.JRadioButtonMenuItem MenuSortSize;
    private javax.swing.JMenu MenuUtilities;
    private javax.swing.JMenu MenuView;
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.ButtonGroup shrinkGroup;
    private javax.swing.ButtonGroup sortDirectionGroup;
    private javax.swing.ButtonGroup sortTypeGroup;
    // End of variables declaration//GEN-END:variables

    void setView(View view) {
        this.view = view;
    }

    private void clearAllSortButtons() {
        // being rigorous.  Setting default in NB Design can foul things up!
        MenuSortName.setSelected(false);
        MenuSortDate.setSelected(false);
        MenuSortSize.setSelected(false);
        MenuSortRandom.setSelected(false);
        MenuSortAscending.setSelected(false);
        MenuSortDescending.setSelected(false);
    }

    private void clearAllScaleButtons() {
        MenuNoScale.setSelected(true);
        MenuShrinkHalf.setSelected(false);
        MenuShrinkFourth.setSelected(false);
        MenuShrinkEighth.setSelected(false);
        MenuExpand125.setSelected(false);
        MenuExpand150.setSelected(false);
        MenuExpand200.setSelected(false);
    }

    private void initSlider() {
        JSlider slider = new JSlider();
        slider.setMajorTickSpacing(50);
        slider.setValue(100);
        slider.setMaximum(500);
        slider.setMinimum(0);
        slider.setMinorTickSpacing(10);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setSnapToTicks(true);
        slider.setPreferredSize(new Dimension(700, 65));
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                
//                if(slider.getValueIsAdjusting())
//                    return;
                var val =slider.getValue();
                
                if(val %5 != 0)
                    return;
                
                if(val < 10)
                    val = 10;
                
                double value = val;
                
                view.setScaleFactor(value/100.0);
                System.out.println(slider.getBounds());
            }
        });
        MenuScaler.add(slider);
    }
}
