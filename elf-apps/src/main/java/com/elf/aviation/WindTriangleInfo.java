/*
 * WindTriangleInfo.java
 *
 * Created on November 30, 2001, 6:10 PM
 */

package com.elf.aviation;

/**
 *
 * @author  bnevins
 * @version 
 */
public class WindTriangleInfo 
{
	public WindTriangleInfo() 
	{
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setWindDirection(double w)
	{
		wd = w;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setWindDirection(int w)
	{
		wd = AviationUtils.degreeToRadian(w);
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getWindDirection()
	{
		return wd;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setWindSpeed(double d)
	{
		ws = d;
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getWindSpeed()
	{
		return ws;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setTrueCourse(double d)
	{
		tc = d;
	}
	//////////////////////////////////////////////////////////////////////////
	
	void setTrueCourse(int i)
	{
		tc = AviationUtils.degreeToRadian(i);
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getTrueCourse()
	{
		return tc;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setGroundSpeed(double d)
	{
		gs = d;
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getGroundSpeed()
	{
		return gs;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setTrueAirSpeed(double d)
	{
		tas = d;
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getTrueAirSpeed()
	{
		return tas;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setTrueHeading(double d)
	{
		th = d;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setTrueHeading(int i)
	{
		th = AviationUtils.degreeToRadian(i);
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getTrueHeading()
	{
		return th;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setVariation(double d)
	{
		var = d;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setVariation(int i)
	{
		var = AviationUtils.degreeToRadian(i);
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getVariation()
	{
		return var;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setMagneticHeading(double d)
	{
		mh = d;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setMagneticHeading(int i)
	{
		mh = AviationUtils.degreeToRadian(i);
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getMagneticHeading()
	{
		return mh;
	}

	//////////////////////////////////////////////////////////////////////////
	
	void setWindCorrectionAngle(double d)
	{
		wca = d;
	}

	//////////////////////////////////////////////////////////////////////////
	
	double getWindCorrectionAngle()
	{
		return wca;
	}

	//////////////////////////////////////////////////////////////////////////

	private int toDeg(double r)
	{
		return (int)AviationUtils.radianToDegree(r);
	}

	//////////////////////////////////////////////////////////////////////////

	double getDistance()
	{
		return dist;
	}

	//////////////////////////////////////////////////////////////////////////

	void setDistance(double d)
	{
		dist = d;
	}

	//////////////////////////////////////////////////////////////////////////

	double getTime()
	{
		return time;
	}

	//////////////////////////////////////////////////////////////////////////

	void setTime(double d)
	{
		time = d;
	}

	//////////////////////////////////////////////////////////////////////////

	public String toString()
	{
		StringBuffer sb = new StringBuffer("*** WindTriangleInfo Dump ***\n");
		sb.append("Wind Speed:            " + ws			+ " knots\n");
		sb.append("Wind Direction:        " + toDeg(wd)		+ "\n");
		sb.append("True Course:           " + toDeg(tc)		+ "\n"); 
		sb.append("True Air Speed:        " + tas			+ " knots\n"); 
		sb.append("True Heading:          " + toDeg(th)		+ "\n");
		sb.append("Magnetic Variation:    " + toDeg(var)	+ "\n");
		sb.append("Wind Correction Angle: " + toDeg(var)	+ "\n");
		sb.append("Distance:              "	+ dist			+ " nm\n");
		sb.append("Magnetic Heading:      " + toDeg(mh)		+ "\n");
		sb.append("Ground Speed:          " + gs			+ " knots\n"); 
		sb.append("Time:                  "	+ time			+ " minutes\n");
		
		
		return sb.toString();
	}

	//////////////////////////////////////////////////////////////////////////
	
	// all the angles are kept as RADIANS -- not degrees...
	private double		wd	= 0;
	private double		ws	= 0;
	private double		tc	= 0;
	private double		gs	= 0;
	private double		tas	= 0;
	private double		th	= 0;
	private double		var	= 0;
	private double		mh	= 0;
	private double		wca = 0;
	private double		dist = 0;
	private double		time = 0;
}
